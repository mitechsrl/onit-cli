import { Count, CountSchema, Filter, repository, Where } from '@loopback/repository';
import { getModelSchemaRef, getWhereSchemaFor, param, requestBody} from '@loopback/rest';
import { <%= sourceModelClassName %>, <%= targetModelClassName %> } from '../models';
import { <%= sourceRepositoryClassName %> } from '../repositories';
import { onitApi } from '@mitech/onit-next/dist/lib/decorators/rest';

export class <%= controllerClassName %> {
  constructor(
    @repository(<%= sourceRepositoryClassName %>) protected <%= paramSourceRepository %>: <%= sourceRepositoryClassName %>,
  ) { }

    @onitApi({
        method: 'get',
        authenticate: true,
        path: '/<%= sourceModelPath %>/{id}/<%= targetModelPath %>',
        spec: {
            responses: {
                '200': {
                    description: 'Array of <%= sourceModelClassName %> has many <%= targetModelClassName %>',
                    content: {
                        'application/json': {
                            schema: {type: 'array', items: getModelSchemaRef(<%= targetModelClassName %>)},
                        },
                    },
                },
            },
        }
    })
    async find(
        @param.path.<%= sourceModelPrimaryKeyType %>('id') id: <%= sourceModelPrimaryKeyType %>,
        @param.query.object('filter') filter?: Filter<<%= targetModelClassName %>>,
    ): Promise<<%= targetModelClassName %>[]> {
        return this.<%= paramSourceRepository %>.<%= relationPropertyName %>(id).find(filter);
    }

    @onitApi({
        method: 'post',
        authenticate: true,
        path: '/<%= sourceModelPath %>/{id}/<%= targetModelPath %>',
        spec: {
            responses: {
                '200': {
                    description: '<%= sourceModelClassName %> model instance',
                    content: {'application/json': {schema: getModelSchemaRef(<%= targetModelClassName %>)}},
                },
            },
        }
    })
    async create(
        @param.path.<%= sourceModelPrimaryKeyType %>('id') id: typeof <%= sourceModelClassName %>.prototype.<%= sourceModelPrimaryKey %>,
        @requestBody({
            content: {
                'application/json': {
                    schema: getModelSchemaRef(<%= targetModelClassName %>, {
                        title: 'New<%= targetModelClassName %>In<%= sourceModelClassName %>',
                        exclude: ['<%= targetModelPrimaryKey %>'],
                        optional: ['<%= foreignKeyName %>']
                    }),
                },
            },
            }) <%= targetModelRequestBody %>: Omit<<%= targetModelClassName %>, '<%= targetModelPrimaryKey %>'>,
    ): Promise<<%= targetModelClassName %>> {
        return this.<%= paramSourceRepository %>.<%= relationPropertyName %>(id).create(<%= targetModelRequestBody %>);
    }

    @onitApi({
        method: 'patch',
        authenticate: true,
        path: '/<%= sourceModelPath %>/{id}/<%= targetModelPath %>',
        spec: {
            responses: {
                '200': {
                    description: '<%= sourceModelClassName %>.<%= targetModelClassName %> PATCH success count',
                    content: {'application/json': {schema: CountSchema}},
                },
            },
        }
    })
    async patch(
        @param.path.<%= sourceModelPrimaryKeyType %>('id') id: <%= sourceModelPrimaryKeyType %>,
        @requestBody({
            content: {
                'application/json': {
                    schema: getModelSchemaRef(<%= targetModelClassName %>, {partial: true}),
                },
            },
        })
        <%= targetModelRequestBody %>: Partial<<%= targetModelClassName %>>,
        @param.query.object('where', getWhereSchemaFor(<%= targetModelClassName %>)) where?: Where<<%= targetModelClassName %>>,
    ): Promise<Count> {
        return this.<%= paramSourceRepository %>.<%= relationPropertyName %>(id).patch(<%= targetModelRequestBody %>, where);
    }

    @onitApi({
        method: 'delete',
        authenticate: true,
        path: '/<%= sourceModelPath %>/{id}/<%= targetModelPath %>',
        spec: {
            responses: {
                '200': {
                    description: '<%= sourceModelClassName %>.<%= targetModelClassName %> DELETE success count',
                    content: {'application/json': {schema: CountSchema}},
                },
            },
        }
    })
    async delete(
        @param.path.<%= sourceModelPrimaryKeyType %>('id') id: <%= sourceModelPrimaryKeyType %>,
        @param.query.object('where', getWhereSchemaFor(<%= targetModelClassName %>)) where?: Where<<%= targetModelClassName %>>,
    ): Promise<Count> {
        return this.<%= paramSourceRepository %>.<%= relationPropertyName %>(id).delete(where);
    }
}
