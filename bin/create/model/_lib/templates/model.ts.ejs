<% if (isModelBaseBuiltin) { -%>
import { <%= modelBaseClass %>, model, property } from '@loopback/repository';
<% } else { -%>
import { model, property } from '@loopback/repository';
import { <%= modelBaseClass %> } from '.';
<% } -%>
import { applyModelMixins } from '<%= importPath %>/lib/mixins/applyModelMixins';
import { OnitMixin } from '<%= importPath %>/types';
<% mixins.forEach(m => { %>
import { <%= m.mixinName %> } from '<%= m.filename %>';<%
}) %>

export const <%= classNameCapitalModelName %>_MODEL_NAME = 'models.<%= className %>';

const mixins: OnitMixin[] = [
    <%= mixins.map(m => m.mixinName).join(',\n    ') %>
];

<% if (modelSettings) { -%>
@model(<%- modelSettings %>)
<% } else { -%>
@model()
<% } -%>
export class <%= className %> extends applyModelMixins(mixins, <%= modelBaseClass %>) {
<% Object.entries(properties).forEach(([key, val]) => { -%>
    @property({
        <%_ Object.entries(val).forEach(([propKey, propVal]) => { -%>
        <%_ if (!['tsType'].includes(propKey)) { -%>
        <%= propKey %>: <%- propVal %>,
        <%_ } -%>
        <%_ }) -%>
    })
    <%= key %><%if (!val.required) {%>?<% } %>: <%= val.tsType %>;

<% }) -%>
<% if(allowAdditionalProperties) { -%>
    // Define well-known properties here

    // Indexer property to allow additional data
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    [prop: string]: any;
<% } -%>

    constructor(data?: Partial<<%= className %>>) {
        super(data);
    }
}

export interface <%= className %>Relations {
    // describe navigational properties here
}

export type <%= className %>WithRelations = <%= className %> & <%= className %>Relations;
